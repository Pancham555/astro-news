---
import Menu from "@/assets/svgs/menu.astro";
import { NAVIGATION_LINKS, OTHER_LINKS, SITE } from "@/lib/config";
import NavbarItem from "../bases/navbar-item.astro";
---

<div class="sidebar-wrapper">
  <button
    id="sidebar-toggle"
    class="btn btn-circle"
    aria-label="Toggle Menu"
    aria-expanded="false">
    <Menu />
  </button>

  <!-- Overlay -->
  <div id="sidebar-overlay" class="sidebar-overlay"></div>

  <!-- Sidebar -->
  <aside id="sidebar" class="sidebar bg-base-100 z-50">
    <div class="sidebar-header">
      <h2 class="text-lg font-medium">
        <div class="flex items-center">
          <img src="/The_Nomad.png" alt="logo" class="w-6" />
          <a class="text-xl px-2 text-nowrap" href="/">{SITE.title}</a>
        </div>
      </h2>
      <button
        id="sidebar-close"
        class="btn btn-sm btn-circle"
        aria-label="Close Menu">
        âœ•
      </button>
    </div>

    <ul class="menu p-4 w-full h-full bg-base-100 text-base">
      <li><a href="/" aria-label="Homepage">Home</a></li>
      <li>
        <NavbarItem item={{ href: "/articles", text: "Articles" }} />
        <!-- <a href="/articles" aria-label="Articles Page">Articles</a> -->
      </li>

      <li>
        <details>
          <summary>Categories</summary>
          <ul>
            {
              NAVIGATION_LINKS.map(({ href, text, target }) => (
                <li>
                  <NavbarItem item={{href,text,target}}/>
                </li>
              ))
            }
          </ul>
        </details>
      </li>

      <li>
        <details>
          <summary>Other Pages</summary>
          <ul>
            {
              OTHER_LINKS.map(({ href, text, target }) => (
                <li>
                  <a href={href} 
                  aria-label={text}>
                    {text}
                  </a>
                </li>
              ))
            }
          </ul>
        </details>
      </li>
    </ul>
  </aside>
</div>

<style>
  .sidebar-wrapper {
    position: relative;
  }

  .sidebar-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 40;
    opacity: 0;
    visibility: hidden;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease;
  }

  .sidebar-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .sidebar {
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 360px;
    /* background-color: var(--fallback-b1, okl/ch(var(--b1))); */
    z-index: 50;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
    overflow-y: auto;
    overflow-x: hidden;
    box-shadow: 2px 0 8px rgba(0, 0, 0, 0.1);
  }

  .sidebar.active {
    transform: translateX(0);
  }

  .sidebar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--fallback-bc, oklch(var(--bc) / 0.1));
    /* background-color: var(--fallback-b1, oklch(var(--b1))); */
  }

  .sidebar-header button {
    background-color: var(--fallback-b2, oklch(var(--b2)));
    border: 1px solid var(--fallback-bc, oklch(var(--bc) / 0.2));
  }

  .sidebar-header button:hover {
    background-color: var(--fallback-b3, oklch(var(--b3)));
  }

  #sidebar-toggle {
    background-color: var(--fallback-b2, oklch(var(--b2))) !important;
    border: 1px solid var(--fallback-bc, oklch(var(--bc) / 0.2)) !important;
  }

  #sidebar-toggle:hover {
    background-color: var(--fallback-b3, oklch(var(--b3))) !important;
  }

  /* Prevent body scroll when sidebar is open */
  body.sidebar-open {
    overflow: hidden;
  }
</style>

<script>
  function initializeSidebar() {
    const toggle = document.getElementById("sidebar-toggle");
    const close = document.getElementById("sidebar-close");
    const sidebar = document.getElementById("sidebar");
    const overlay = document.getElementById("sidebar-overlay");

    // Check if elements exist
    if (!toggle || !close || !sidebar || !overlay) {
      console.warn("Sidebar elements not found, retrying...");
      return false;
    }

    let currentToggle = toggle;
    let currentClose = close;
    let currentOverlay = overlay;

    function openSidebar() {
      sidebar?.classList.add("active");
      const overlayElement = document.getElementById("sidebar-overlay");
      if (overlayElement) {
        overlayElement.classList.add("active");
      }
      document.body.classList.add("sidebar-open");
      const toggleElement = document.getElementById("sidebar-toggle");
      if (toggleElement) {
        toggleElement.setAttribute("aria-expanded", "true");
      }
    }

    function closeSidebar() {
      sidebar?.classList.remove("active");
      const overlayElement = document.getElementById("sidebar-overlay");
      if (overlayElement) {
        overlayElement.classList.remove("active");
      }
      document.body.classList.remove("sidebar-open");
      const toggleElement = document.getElementById("sidebar-toggle");
      if (toggleElement) {
        toggleElement.setAttribute("aria-expanded", "false");
      }
    }

    // Remove old event listeners by cloning
    const newToggle = currentToggle.cloneNode(true);
    const newClose = currentClose.cloneNode(true);
    const newOverlay = currentOverlay.cloneNode(true);
    
    currentToggle.parentNode?.replaceChild(newToggle, currentToggle);
    currentClose.parentNode?.replaceChild(newClose, currentClose);
    currentOverlay.parentNode?.replaceChild(newOverlay, currentOverlay);

    // Add event listeners to new elements
    newToggle.addEventListener("click", openSidebar);
    newClose.addEventListener("click", closeSidebar);
    newOverlay.addEventListener("click", closeSidebar);

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && sidebar.classList.contains("active")) {
        closeSidebar();
      }
    });

    return true;
  }

  // Try to initialize immediately
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeSidebar);
  } else {
    initializeSidebar();
  }

  // Fallback: retry after a short delay if initial attempt fails
  setTimeout(() => {
    const sidebar = document.getElementById("sidebar");
    if (!sidebar || !sidebar.dataset.initialized) {
      initializeSidebar();
    }
  }, 100);

  // For Astro view transitions (if you're using them)
  document.addEventListener("astro:page-load", initializeSidebar);
</script>